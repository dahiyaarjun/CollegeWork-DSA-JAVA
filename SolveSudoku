class Solution {
    public void solveSudoku(char[][] board) {
        int n=board.length;
        sol(0,0,board);
    }
    static boolean sol(int row,int col,char[][] board){
        if(col==board.length){
            row=row+1;
            col=0;
        }
        if(row==board.length){
            return true;
        }
        if(board[row][col]!='.') return sol(row,col+1,board);
        for(char i='1';i<='9';i++){
            if(canIPlace(board,row,col,i)){
                board[row][col]=i;
                boolean result=sol(row,col+1,board);
                if(result){
                    return result;
                }board[row][col]='.';
            }
        }return false;
    }
    static boolean canIPlace(char[][] board,int row,int col,int value){
        int n=board.length;
        for(int i=0;i<n;i++){
            if(board[i][col]==value) return false;
        }
        for(int i=0;i<n;i++){
            if(board[row][i]==value) return false;
        }
        int r=row-row%3;
        int c=col-col%3;
        for(int i=r;i<r+3;i++){
            for(int j=c;j<c+3;j++){
                if(board[i][j]==value){
                    return false;
                }
            }
        }return true;
    }
}
